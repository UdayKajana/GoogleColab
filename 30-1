import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.pipeline_options import StandardOptions
import argparse
import logging

logging.getLogger().setLevel(logging.ERROR)

class TemplateOptions(PipelineOptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        # Required parameters
        parser.add_argument('--project', dest='project', required=True, help='GCP Project ID')
        parser.add_argument('--query', dest='query', required=True, help='BigQuery SQL query')
        parser.add_argument('--gcs_folder_path', dest='gcs_folder_path', required=True, help='Output GCS folder path')
        
        # Network configuration
        parser.add_argument('--network', dest='network', required=True, help='VPC network')
        parser.add_argument('--subnetwork', dest='subnetwork', required=True, help='VPC subnetwork')
        
        # Optional parameters with defaults
        parser.add_argument('--region', dest='region', default='us-east4', help='GCP project region')
        parser.add_argument('--service_account_email', dest='service_account_email', required=True, help='Service account email')
        parser.add_argument('--temp_location', dest='temp_location', required=True, help='Temp GCS bucket path')
        parser.add_argument('--staging_location', dest='staging_location', required=True, help='Staging GCS bucket path')

def run(argv=None):
    parser = argparse.ArgumentParser()
    known_args, pipeline_args = parser.parse_known_args(argv)
    
    pipeline_options = TemplateOptions(pipeline_args)
    pipeline_options.view_as(StandardOptions).runner = 'DataflowRunner'
    
    with beam.Pipeline(options=pipeline_options) as p:
        # Reading from BigQuery
        data = p | 'ReadFromBigQuery' >> beam.io.ReadFromBigQuery(
            query=pipeline_options.query,
            use_standard_sql=True
        )
        
        # Converting to CSV format
        csv_data = data | 'ConvertToCSV' >> beam.Map(
            lambda row: ','.join(str(x) for x in row.values())
        )
        
        # Writing to GCS
        csv_data | 'WriteToGCS' >> beam.io.WriteToText(
            f'{pipeline_options.gcs_folder_path}/output.csv',
            file_name_suffix='.csv',
            header="ont_activation_date,data_circuit_id,circuit_id,video_circuit_id,service_type,address_id,vision_account_id,vision_customer_id,address_type,line_of_business"
        )

if __name__ == '__main__':
    run()


gcloud dataflow flex-template run "bigquery-pipeline-$(date +%Y%m%d-%H%M%S)"     --template-file-gcs-location gs://vznet-test/wireline_churn_test/src/template.json     --project vz-it-np-gudv-dev-vzntdo-0     --region us-east4     --parameters query="SELECT * FROM vz-it-np-gudv-dev-vzntdo-0.vzn_nsdl_common_core_tbls.echo_ticket_opened_proc_v0 LIMIT 10"     --parameters gcs_folder_path="gs://vznet-test/wireline_churn_test/tmp/"     --parameters network="shared-np-east"     --parameters subnetwork="https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2"     --parameters service_account_email="sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com"     --num-workers 2     --max-workers 2     --worker-machine-type n2-standard-2     --disable-public-ips     --temp-location gs://vznet-test/wireline_churn_test/tmp/     --dataflow-kms-key projects/vz-it-np-d0sv-vsadkms-0/locations/us-east4/keyRings/vz-it-np-kr-aid/cryptoKeys/vz-it-np-kms-gudv

{"severity":"INFO","time":"2024/12/30 09:54:47.448505","line":"python_template_launcher.go:40","message":"Started template launcher."}
{"severity":"INFO","time":"2024/12/30 09:54:47.463412","line":"python_template_launcher.go:44","message":"Initialize Python template."}
{"severity":"INFO","time":"2024/12/30 09:54:47.463439","line":"python_template.go:98","message":"Falling back to using template-container args from metadata: template-container-args"}
{"severity":"INFO","time":"2024/12/30 09:54:47.469733","line":"python_template.go:108","message":"Validating template-container-args: {\"additionalBoolParameters\":[\"no_use_public_ips\"],\"consoleLogsLocation\":\"gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/console_logs\",\"environment\":{\"network\":\"shared-np-east\",\"region\":\"us-east4\",\"serviceAccountEmail\":\"sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com\",\"stagingLocation\":\"gs://dataflow-staging-us-east4-206482042907/staging\",\"subnetwork\":\"https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2\",\"tempLocation\":\"gs://vznet-test/wireline_churn_test/tmp/\"},\"jobId\":\"2024-12-30_01_52_59-12775340974822554399\",\"jobName\":\"bigquery-pipeline-20241230-045259\",\"jobObjectLocation\":\"gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/job_object\",\"operationResultLocation\":\"gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/operation_result\",\"parameters\":{\"dataflow_kms_key\":\"projects/vz-it-np-d0sv-vsadkms-0/locations/us-east4/keyRings/vz-it-np-kr-aid/cryptoKeys/vz-it-np-kms-gudv\",\"gcs_folder_path\":\"gs://vznet-test/wireline_churn_test/tmp/\",\"machine_type\":\"n2-standard-2\",\"max_num_workers\":\"2\",\"network\":\"shared-np-east\",\"num_workers\":\"2\",\"query\":\"SELECT * FROM vz-it-np-gudv-dev-vzntdo-0.vzn_nsdl_common_core_tbls.echo_ticket_opened_proc_v0 LIMIT 10\",\"service_account_email\":\"sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com\",\"staging_location\":\"gs://dataflow-staging-us-east4-206482042907/staging\",\"subnetwork\":\"https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2\",\"temp_location\":\"gs://vznet-test/wireline_churn_test/tmp/\"},\"projectId\":\"vz-it-np-gudv-dev-vzntdo-0\"}"}
{"severity":"INFO","time":"2024/12/30 09:54:47.470702","line":"python_template.go:117","message":"Extracting operation result location."}
{"severity":"INFO","time":"2024/12/30 09:54:47.470745","line":"python_template.go:125","message":"Operation result location: gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/operation_result"}
{"severity":"INFO","time":"2024/12/30 09:54:47.470772","line":"python_template.go:128","message":"Extracting console log location."}
{"severity":"INFO","time":"2024/12/30 09:54:47.470789","line":"python_template.go:136","message":"Console logs location: gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/console_logs"}
{"severity":"INFO","time":"2024/12/30 09:54:47.470810","line":"python_template.go:139","message":"Extracting Python command specs."}
{"severity":"INFO","time":"2024/12/30 09:54:47.471608","line":"python_template.go:148","message":"Generating launch args."}
{"severity":"INFO","time":"2024/12/30 09:54:47.471808","line":"python_args.go:236","message":"Overriding service_account_email with value: sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com (previous value: sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com)"}
{"severity":"INFO","time":"2024/12/30 09:54:47.471844","line":"python_args.go:236","message":"Overriding staging_location with value: gs://dataflow-staging-us-east4-206482042907/staging (previous value: gs://dataflow-staging-us-east4-206482042907/staging)"}
{"severity":"INFO","time":"2024/12/30 09:54:47.471890","line":"python_args.go:236","message":"Overriding temp_location with value: gs://vznet-test/wireline_churn_test/tmp/ (previous value: gs://vznet-test/wireline_churn_test/tmp/)"}
{"severity":"INFO","time":"2024/12/30 09:54:47.471908","line":"python_args.go:236","message":"Overriding subnetwork with value: https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2 (previous value: https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2)"}
{"severity":"INFO","time":"2024/12/30 09:54:47.471936","line":"python_args.go:236","message":"Overriding network with value: shared-np-east (previous value: shared-np-east)"}
{"severity":"INFO","time":"2024/12/30 09:54:47.472020","line":"launch.go:50","message":"Validating ExpectedFeatures."}
{"severity":"INFO","time":"2024/12/30 09:54:47.472054","line":"launch.go:75","message":"Launching Python template."}
{"severity":"INFO","time":"2024/12/30 09:54:47.472103","line":"python_template.go:64","message":"Using launch args: [/template/pipeline.py --query=SELECT * FROM vz-it-np-gudv-dev-vzntdo-0.vzn_nsdl_common_core_tbls.echo_ticket_opened_proc_v0 LIMIT 10 --project=vz-it-np-gudv-dev-vzntdo-0 --gcs_folder_path=gs://vznet-test/wireline_churn_test/tmp/ --runner=DataflowRunner --staging_location=gs://dataflow-staging-us-east4-206482042907/staging --max_num_workers=2 --machine_type=n2-standard-2 --template_location=gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/job_object --service_account_email=sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com --network=shared-np-east --subnetwork=https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2 --region=us-east4 --num_workers=2 --job_name=bigquery-pipeline-20241230-045259 --temp_location=gs://vznet-test/wireline_churn_test/tmp/ --dataflow_kms_key=projects/vz-it-np-d0sv-vsadkms-0/locations/us-east4/keyRings/vz-it-np-kr-aid/cryptoKeys/vz-it-np-kms-gudv --no_use_public_ips]"}
{"severity":"INFO","time":"2024/12/30 09:54:47.472172","line":"exec.go:38","message":"Executing: python /template/pipeline.py --query=SELECT * FROM vz-it-np-gudv-dev-vzntdo-0.vzn_nsdl_common_core_tbls.echo_ticket_opened_proc_v0 LIMIT 10 --project=vz-it-np-gudv-dev-vzntdo-0 --gcs_folder_path=gs://vznet-test/wireline_churn_test/tmp/ --runner=DataflowRunner --staging_location=gs://dataflow-staging-us-east4-206482042907/staging --max_num_workers=2 --machine_type=n2-standard-2 --template_location=gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/job_object --service_account_email=sa-dev-gudv-app-vzntdo-0@vz-it-np-gudv-dev-vzntdo-0.iam.gserviceaccount.com --network=shared-np-east --subnetwork=https://www.googleapis.com/compute/v1/projects/vz-it-np-exhv-sharedvpc-228116/regions/us-east4/subnetworks/shared-np-east-green-subnet-2 --region=us-east4 --num_workers=2 --job_name=bigquery-pipeline-20241230-045259 --temp_location=gs://vznet-test/wireline_churn_test/tmp/ --dataflow_kms_key=projects/vz-it-np-d0sv-vsadkms-0/locations/us-east4/keyRings/vz-it-np-kr-aid/cryptoKeys/vz-it-np-kms-gudv --no_use_public_ips"}
{"severity":"INFO","time":"2024/12/30 09:54:52.441830","line":"exec.go:66","message":"Traceback (most recent call last):"}
{"severity":"INFO","time":"2024/12/30 09:54:52.441971","line":"exec.go:66","message":"  File \"/template/pipeline.py\", line 54, in \u003cmodule\u003e"}
{"severity":"INFO","time":"2024/12/30 09:54:52.442220","line":"exec.go:66","message":"    run()"}
{"severity":"INFO","time":"2024/12/30 09:54:52.442281","line":"exec.go:66","message":"  File \"/template/pipeline.py\", line 47, in run"}
{"severity":"INFO","time":"2024/12/30 09:54:52.442422","line":"exec.go:66","message":"    csv_data | 'WriteToGCS' \u003e\u003e beam.io.WriteToText("}
{"severity":"INFO","time":"2024/12/30 09:54:52.442485","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/pipeline.py\", line 620, in __exit__"}
{"severity":"INFO","time":"2024/12/30 09:54:52.442781","line":"exec.go:66","message":"    self.result = self.run()"}
{"severity":"INFO","time":"2024/12/30 09:54:52.442836","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/pipeline.py\", line 567, in run"}
{"severity":"INFO","time":"2024/12/30 09:54:52.443309","line":"exec.go:66","message":"    return Pipeline.from_runner_api("}
{"severity":"INFO","time":"2024/12/30 09:54:52.443383","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/pipeline.py\", line 594, in run"}
{"severity":"INFO","time":"2024/12/30 09:54:52.443676","line":"exec.go:66","message":"    return self.runner.run_pipeline(self, self._options)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.443734","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/runners/dataflow/dataflow_runner.py\", line 502, in run_pipeline"}
{"severity":"INFO","time":"2024/12/30 09:54:52.444044","line":"exec.go:66","message":"    self.dataflow_client.create_job(self.job), self)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.444146","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/utils/retry.py\", line 298, in wrapper"}
{"severity":"INFO","time":"2024/12/30 09:54:52.444355","line":"exec.go:66","message":"    return fun(*args, **kwargs)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.444410","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/runners/dataflow/internal/apiclient.py\", line 698, in create_job"}
{"severity":"INFO","time":"2024/12/30 09:54:52.444688","line":"exec.go:66","message":"    self.create_job_description(job)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.444738","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/runners/dataflow/internal/apiclient.py\", line 798, in create_job_description"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445096","line":"exec.go:66","message":"    job.proto.environment = Environment("}
{"severity":"INFO","time":"2024/12/30 09:54:52.445153","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/runners/dataflow/internal/apiclient.py\", line 268, in __init__"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445340","line":"exec.go:66","message":"    sdk_pipeline_options = options.get_all_options(retain_unknown_options=True)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445395","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/site-packages/apache_beam/options/pipeline_options.py\", line 351, in get_all_options"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445597","line":"exec.go:66","message":"    cls._add_argparse_args(parser)  # pylint: disable=protected-access"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445658","line":"exec.go:66","message":"  File \"/template/pipeline.py\", line 13, in _add_argparse_args"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445785","line":"exec.go:66","message":"    parser.add_argument('--project', dest='project', required=True, help='GCP Project ID')"}
{"severity":"INFO","time":"2024/12/30 09:54:52.445844","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/argparse.py\", line 1441, in add_argument"}
{"severity":"INFO","time":"2024/12/30 09:54:52.446320","line":"exec.go:66","message":"    return self._add_action(action)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.446378","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/argparse.py\", line 1806, in _add_action"}
{"severity":"INFO","time":"2024/12/30 09:54:52.446905","line":"exec.go:66","message":"    self._optionals._add_action(action)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.446961","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/argparse.py\", line 1643, in _add_action"}
{"severity":"INFO","time":"2024/12/30 09:54:52.447477","line":"exec.go:66","message":"    action = super(_ArgumentGroup, self)._add_action(action)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.447536","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/argparse.py\", line 1455, in _add_action"}
{"severity":"INFO","time":"2024/12/30 09:54:52.447986","line":"exec.go:66","message":"    self._check_conflict(action)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.448034","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/argparse.py\", line 1592, in _check_conflict"}
{"severity":"INFO","time":"2024/12/30 09:54:52.448500","line":"exec.go:66","message":"    conflict_handler(action, confl_optionals)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.448554","line":"exec.go:66","message":"  File \"/usr/local/lib/python3.9/argparse.py\", line 1601, in _handle_conflict_error"}
{"severity":"INFO","time":"2024/12/30 09:54:52.449025","line":"exec.go:66","message":"    raise ArgumentError(action, message % conflict_string)"}
{"severity":"INFO","time":"2024/12/30 09:54:52.449140","line":"exec.go:66","message":"argparse.ArgumentError: argument --project: conflicting option string: --project"}
{"severity":"INFO","time":"2024/12/30 09:54:52.820457","line":"exec.go:52","message":"python failed with exit status 1"}
{"severity":"ERROR","time":"2024/12/30 09:54:52.820582","line":"launch.go:80","message":"Error: Template launch failed: exit status 1"}
{"severity":"INFO","time":"2024/12/30 09:54:52.820611","line":"launch.go:102","message":"Uploading console logs to GCS location: gs://dataflow-staging-us-east4-206482042907/staging/template_launches/2024-12-30_01_52_59-12775340974822554399/console_logs"}




import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.pipeline_options import StandardOptions
import argparse
import logging

logging.getLogger().setLevel(logging.ERROR)

class TemplateOptions(PipelineOptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        # Remove the --project argument as it's already defined in PipelineOptions
        
        # Required parameters
        parser.add_argument('--query', dest='query', required=True, help='BigQuery SQL query')
        parser.add_argument('--gcs_folder_path', dest='gcs_folder_path', required=True, help='Output GCS folder path')
        
        # Network configuration
        parser.add_argument('--network', dest='network', required=True, help='VPC network')
        parser.add_argument('--subnetwork', dest='subnetwork', required=True, help='VPC subnetwork')
        
        # Optional parameters with defaults
        parser.add_argument('--region', dest='region', default='us-east4', help='GCP project region')
        parser.add_argument('--service_account_email', dest='service_account_email', required=True, help='Service account email')
        parser.add_argument('--temp_location', dest='temp_location', required=True, help='Temp GCS bucket path')
        parser.add_argument('--staging_location', dest='staging_location', required=True, help='Staging GCS bucket path')

def run(argv=None):
    parser = argparse.ArgumentParser()
    known_args, pipeline_args = parser.parse_known_args(argv)
    
    pipeline_options = TemplateOptions(pipeline_args)
    pipeline_options.view_as(StandardOptions).runner = 'DataflowRunner'
    
    with beam.Pipeline(options=pipeline_options) as p:
        # Reading from BigQuery
        data = p | 'ReadFromBigQuery' >> beam.io.ReadFromBigQuery(
            query=pipeline_options.query,
            use_standard_sql=True
        )
        
        # Converting to CSV format
        csv_data = data | 'ConvertToCSV' >> beam.Map(
            lambda row: ','.join(str(x) for x in row.values())
        )
        
        # Writing to GCS
        csv_data | 'WriteToGCS' >> beam.io.WriteToText(
            f'{pipeline_options.gcs_folder_path}/output.csv',
            file_name_suffix='.csv',
            header="ont_activation_date,data_circuit_id,circuit_id,video_circuit_id,service_type,address_id,vision_account_id,vision_customer_id,address_type,line_of_business"
        )

if __name__ == '__main__':
    run()
