import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.io.gcp.pubsub import ReadFromPubSub
from apache_beam.options.pipeline_options import StandardOptions
import avro
import argparse
import logging
logging.getLogger().setLevel(logging.ERROR)
class TemplateOptions(PipelineOptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        parser.add_value_provider_argument('--params', type=str)
parser = argparse.ArgumentParser()
parser.add_argument('--project', dest='project', required=True, help='GCP Project ID')
parser.add_argument('--runner', dest='runner', required=False, default="DataflowRunner", help='Pipeline runner')
parser.add_argument('--region', dest='region', required=False, default="us-east4", help='GCP project region')
parser.add_argument('--staging_location', dest='staging_location', required=True, help='Staging GCS bucket path')
parser.add_argument('--temp_location', dest='temp_location', required=True, help='Temp GCS bucket path')
parser.add_argument('--template_location', dest='template_location', required=True,help='GCS bucket path to save template')
parser.add_argument('--input_sub', dest='input_sub', required=True, help='Input Subscription')
# parser.add_argument('--gcs_folder_path', dest='gcs_folder_path', required=True, help='Input Subscription')
known_args,beam_args = parser.parse_known_args()

class DecodeDoFn(beam.DoFn):

    def process(self, element):
        from google.cloud import pubsub_v1
        import avro.schema
        from avro.io import DatumReader, BinaryDecoder
        from io import BytesIO
        from datetime import datetime
        import io
        import avro.io as avro_io
        import avro.schema
        from io import BytesIO
        logging.log(logging.INFO, str(element))
        def reformat_input_msg_schema(msg):
            fmt_msg = {}
            fmt_msg['timestamp'] = msg['timestamp']
            fmt_msg['host'] = msg['host']
            fmt_msg['src'] = msg['src']
            fmt_msg['ingressTimestamp'] = msg['_event_ingress_ts']
            fmt_msg['origins'] = [msg['_event_origin']]
            fmt_msg['tags'] = msg['_event_tags']
            fmt_msg['route'] = 3
            fmt_msg['fetchTimestamp'] = datetime.datetime.now()
            fmt_msg['rawdata'] = msg['rawdata']
            return fmt_msg
        message: dict={}
        raw_schema = """{"namespace": "com.vz.vznet",
                         "type": "record",
                         "name": "VznetDefault",
                         "doc": "Default schema for events in transit",
                         "fields": [
                         {"name": "timestamp", "type": "long"},
                         {"name": "host", "type": "string"},
                         {"name": "src",  "type": "string" },
                         {"name": "_event_ingress_ts", "type": "long"},
                         {"name": "_event_origin", "type": "string"},
                         {"name": "_event_tags", "type": {"type": "array", "items": "string"}},
                         {"name": "_event_route", "type": "string"},
                         {"name": "_event_metrics", "type": ["null", "bytes"], "default": null},
                         {"name": "rawdata", "type": "bytes"}]
                        }"""
        try:
            parsed_schema = avro.schema.parse(raw_schema)
            avro_reader: avro_io.DatumReader = avro_io.DatumReader(parsed_schema)
            avro_message: avro_io.BinaryDecoder = avro_io.BinaryDecoder(BytesIO(element))
            message = avro_reader.read(avro_message)
            if parsed_schema.name == 'VznetDefault':
                message['rawdata'] = message['rawdata'].decode("utf-8")
                if message['_event_metrics'] is None:
                    message['_event_metrics'] = message['_event_metrics']
                else:
                    message['_event_metrics'] = message['_event_metrics'].decode("utf-8")
        except ValueError as e:
                    print('Error deserializing the records', e)
        reformatted = reformat_input_msg_schema(message)
        yield reformatted
    
def process_avro_to_csv(message_data):
    logging.log(logging.INFO, str(message_data))
    from io import BytesIO
    import io
    import fastavro
    import csv
    import uuid
    try:
        logging.log(logging.INFO, str(BytesIO))
        # Read Avro data
        bytes_reader = BytesIO(message_data)
        avro_reader = fastavro.reader(bytes_reader)

        # Extract records
        records = [record for record in avro_reader]
        if not records:
            logging.warning("No records found in the Avro message.")
            return None

        # Convert records to CSV format
        fieldnames = list(records[0].keys())
        csv_buffer = io.StringIO()
        writer = csv.DictWriter(csv_buffer, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(records)

        # Generate a unique filename
        unique_id = uuid.uuid4()
        filename = f"message_{unique_id}.csv"

        logging.info(f"Processed message into file: {filename}")
        return filename, csv_buffer.getvalue()
    except Exception as e:
        logging.error(f"Error processing Avro message: {e}")
        return None

def write_csv_to_gcs(element, gcs_location):
    
    from apache_beam.io.gcp.gcsio import GcsIO
    try:
        filename, csv_data = element
        if not csv_data:
            logging.warning(f"No CSV data to write for {filename}. Skipping.")
            return
        # Define GCS file path
        gcs_path = f"{gcs_location}/{filename}"
        logging.log(logging.INFO, gcs_path)
        # Write CSV data to GCS
        gcs_io = GcsIO()
        with gcs_io.open(gcs_path, 'w') as gcs_file:
            gcs_file.write(csv_data.encode("utf-8"))

        logging.info(f"Successfully wrote {filename} to GCS: {gcs_path}")
    except Exception as e:
        logging.error(f"Error writing CSV to GCS: {e}")

options = {
    'project': known_args.project,
    'runner': known_args.runner,
    'region': known_args.region,
    'staging_location': known_args.staging_location,
    'temp_location': known_args.temp_location,
    'template_location': known_args.template_location
}
pipeline_options = PipelineOptions.from_dictionary(options)
pipeline_options.view_as(StandardOptions).streaming = True
p = beam.Pipeline(options=pipeline_options)
pubsub_data=(p|'ReadFromPubsub' >> ReadFromPubSub( subscription=f"projects/{known_args.project}/subscriptions/{known_args.input_sub}"))
print_data = pubsub_data | "PrintData" >> beam.Map(lambda element : logging.log(logging.INFO,  str(element)))
decodedData = (pubsub_data|"Decode">>beam.ParDo(DecodeDoFn()))
p.run()
