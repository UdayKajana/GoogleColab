import json
import fastavro
from io import BytesIO
import logging
import argparse
from google.cloud import pubsub_v1
from concurrent import futures
import datetime
from typing import Dict, Any

SCHEMA = {
    "namespace": "com.vz.vznet",
    "type": "record",
    "name": "VznetDefault",
    "doc": "Default schema for events in transit",
    "fields": [
        {"name": "timestamp", "type": "long"},
        {"name": "host", "type": "string"},
        {"name": "src", "type": "string"},
        {"name": "_event_ingress_ts", "type": "long"},
        {"name": "_event_origin", "type": "string"},
        {"name": "_event_tags", "type": {"type": "array", "items": "string"}},
        {"name": "_event_route", "type": "string"},
        {"name": "_event_metrics", "type": ["null", "bytes"], "default": None},
        {"name": "rawdata", "type": "bytes"}
    ]
}

def push_to_topic(data_rows: bytes, topic_name: str) -> None:
    project_id = "vz-it-np-gudv-dev-vzntdo-0"
    publisher = pubsub_v1.PublisherClient()
    topic_path = publisher.topic_path(project_id, topic_name)
    
    def callback(publish_future: pubsub_v1.publisher.futures.Future) -> None:
        message_id = publish_future.result()
        print(f"Published message {message_id}")
    
    publish_future = publisher.publish(topic_path, data_rows)
    publish_future.add_done_callback(callback)
    print(f"Published message to {topic_path}")

def encode_avro(element: Dict[str, Any]) -> bytes:
    final_dict = {
        'timestamp': element['timestamp'],
        'src': element['src'],
        'host': element['host'],
        '_event_ingress_ts': element['ingressTimestamp'],
        '_event_origin': '|'.join(element['origins']),
        '_event_tags': element['tags'],
        '_event_route': str(element['route']),
        '_event_metrics': None,
        'rawdata': bytes(json.dumps(element['rawdata']), 'utf-8')
    }
    
    bytes_writer = BytesIO()
    fastavro.writer(bytes_writer, SCHEMA, [final_dict])
    return bytes_writer.getvalue()

def process_avro_message(message: pubsub_v1.subscriber.message.Message) -> None:
    try:
        bytes_reader = BytesIO(message.data)
        avro_reader = fastavro.reader(bytes_reader)
        record = next(avro_reader)
        
        # Decode bytes fields
        record['rawdata'] = record['rawdata'].decode("utf-8")
        if record['_event_metrics'] is not None:
            record['_event_metrics'] = record['_event_metrics'].decode("utf-8")
        
        reformatted = {
            'timestamp': record['timestamp'],
            'host': record['host'],
            'src': record['src'],
            'ingressTimestamp': record['_event_ingress_ts'],
            'origins': [record['_event_origin']],
            'tags': record['_event_tags'],
            'route': 3,
            'fetchTimestamp': datetime.datetime.now(),
            'rawdata': record['rawdata']
        }
        
        print(f"Processed message: {reformatted}")
        message.ack()
        
    except Exception as e:
        print(f'Error processing message: {e}')
        message.nack()

def subscribe_to_topic() -> None:
    project_id = "vz-it-np-gudv-dev-vzntdo-0"
    subscription_id = "wireline_churn_test_topic-sub"
    
    subscriber = pubsub_v1.SubscriberClient()
    subscription_path = subscriber.subscription_path(project_id, subscription_id)
    
    streaming_pull_future = subscriber.subscribe(subscription_path, callback=process_avro_message)
    print(f"Listening for messages on {subscription_path}")
    
    with subscriber:
        try:
            streaming_pull_future.result(timeout=20)
        except TimeoutError:
            streaming_pull_future.cancel()
            streaming_pull_future.result()

# Sample usage
if __name__ == "__main__":
    # Sample data from original code
    sample_data = {
        "input": [
            {
                "src": "vz.pip.eclipse.stat.if_stats.proc.v0",
                "timestamp": 1563152004139,
                "host": "TEST-1234-XYZ",
                "ingressTimestamp": 1563153004139,
                "fetchTimestamp": 1563153008139,
                "origins": ["vmb,kafka,ENMV.PIP.IP"],
                "tags": [],
                "route": 3,
                "rawdata": {
                    "ont_activation_date": "2019-08-28 04:00:00.000000 UTC",
                    "data_circuit_id": "A6o6LHciNWfMMDXRAk/AmzSqPzZU3lHpzvpeWb0487+2CKWc6iSMbMf+z7sLju0UiEj/jLnGDmcLlU5t5llkug==",
                    # ... rest of the rawdata fields
                }
            }
        ]
    }
    
    # Publisher example
    for record in sample_data['input']:
        encoded_data = encode_avro(record)
        push_to_topic(encoded_data, "wireline_churn_test_topic")
    
    # Subscriber example
    subscribe_to_topic()
