import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
import argparse
import logging
logging.getLogger().setLevel(logging.INFO)
class BQToGCSOptions(PipelineOptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        parser.add_value_provider_argument(
            '--input_table', #projects/vz-it-np-gudv-dev-vzntdo-0/subscriptions/wireline_churn_test_topic-sub
            type=str,
            help='Input BigQuery table in format: project_id.dataset_id.table_id'
        )
        parser.add_value_provider_argument(
            '--output_path',
            type=str,
            help='Output GCS path (e.g., gs://bucket/path/prefix)'
        )
PipelineOptions=''
def run(argv=None):
    parser = argparse.ArgumentParser()
    known_args, pipeline_args = parser.parse_known_args(argv)
    pipeline_options = BQToGCSOptions(pipeline_args)
    with beam.Pipeline(options=pipeline_options) as pipeline:
        messages    = (pipeline | "ReadFromPubSub" >> beam.io.ReadFromPubSub(
            subscription=pipeline_options.input_table))
if __name__ == '__main__':
    logging.getLogger().setLevel(logging.INFO)
    run()
