mport argparse
import logging

import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.value_provider import ValueProvider

class ValidateSubscription(beam.DoFn):
    """Validates the subscription string."""
    def process(self, element, subscription):
        if not subscription.startswith("projects/") or "/subscriptions/" not in subscription:
            raise ValueError(f"Invalid subscription format: {subscription}")
        yield element  # Pass the original element through

def run(argv=None):
    """Main entry point; defines and runs the pipeline."""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--input",
        dest="input",
        default="gs://your-bucket/input.txt", # Replace with your input
        help="Input file to process.",
    )
    parser.add_argument(
        "--output",
        dest="output",
        required=True,
        help="Output file to write results to.",
    )
    parser.add_argument(
        "--subscription",
        dest="subscription",
        required=True,
        help="Pub/Sub subscription to read from (e.g., projects/your-project/subscriptions/your-subscription).",
    )
    known_args, pipeline_args = parser.parse_known_args(argv)

    # Use ValueProvider for runtime parameterization
    subscription_provider = ValueProvider(
        lambda: known_args.subscription,  # Lambda to defer evaluation
        str,
    )
    input_provider = ValueProvider(lambda: known_args.input, str)

    pipeline_options = PipelineOptions(pipeline_args)

    with beam.Pipeline(options=pipeline_options) as pipeline:

        # Example pipeline that reads from Pub/Sub based on the provided subscription
        messages = (
            pipeline
            | "ReadFromPubSub" >> beam.io.ReadFromPubSub(subscription=subscription_provider)
            | "Decode" >> beam.Map(lambda x: x.decode()) # Decode from bytes
            | "ValidateSubscription" >> beam.ParDo(ValidateSubscription(), subscription_provider)
            | "WriteToText" >> beam.io.WriteToText(known_args.output)
        )

if _name_ == "_main_":
    logging.getLogger().setLevel(logging.INFO)
    run()
