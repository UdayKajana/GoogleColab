import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.io.gcp.pubsub import WriteStringsToPubSub, WriteToPubSub, ReadFromPubSub
from apache_beam.options.pipeline_options import StandardOptions
import logging
import argparse

logging.getLogger().setLevel(logging.INFO)

class TemplateOptions(pipelineoptions):
    @classmethod
    def _add_argparse_args(cls, parser):
        parser.add_value_provider_argument('--params', type=str)  # not used so far

parser = argparse.ArgumentParser()
parser.add_argument('--project', dest='project', required=True, help='gcp project id')
parser.add_argument('--runner', dest='runner', required=False, default="dataflowrunner", help='pipeline runner')
parser.add_argument('--region', dest='region', required=False, default="us-east4", help='gcp project region')
parser.add_argument('--staging_location', dest='staging_location', required=True, help='staging gcs bucket path')
parser.add_argument('--temp_location', dest='temp_location', required=True, help='temp gcs bucket path')
parser.add_argument('--template_location', dest='template_location', required=True, help='gcs bucket path to save template')
parser.add_argument('--input_sub', dest='input_sub', required=True, help='input subscription')
known_args,beam_args = parser.parse_known_args()

options = {
    'project': known_args.project,
    'runner': known_args.runner,
    'region': known_args.region,
    'staging_location': known_args.staging_location,
    'temp_location': known_args.temp_location,
    'template_location': known_args.template_location,
    'input_sub': known_args.input_sub
}

pipeline_options = pipelineoptions.from_dictionary(options)
pipeline_options.view_as(standardoptions).streaming = True

def run_pipeline(pipeline_options):
    with beam.Pipeline(options=pipeline_options) as p:
        (
                p
                | 'read' >> ReadFromPubSub(subscription=f"projects/{known_args.project}/subscriptions/{known_args.input_sub}")
                | 'print' >> beam.Map(lambda element: logging.info(str(element)))
        )

if __name__ == '__main__':
    run_pipeline(pipeline_options)
