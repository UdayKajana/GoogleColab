from google.cloud import pubsub_v1
import csv
from fastavro import reader
import io
project_id = "vz-it-np-gudv-dev-vzntdo-0"
subscription_id = "wireline_churn_test_topic-sub"
subscriber = pubsub_v1.SubscriberClient()
subscription_path = f"projects/{project_id}/subscriptions/{subscription_id}"
from google.cloud import pubsub_v1
from google.cloud import storage
import avro.schema
from avro.io import DatumReader, BinaryDecoder
from io import BytesIO
import csv
import pandas as pd
import io
schema = [
    "ont_activation_date",
    "data_circuit_id",
    "circuit_id",
    "video_circuit_id",
    "service_type",
    "address_id",
    "vision_account_id",
    "vision_customer_id",
    "address_type",
    "line_of_business"
]
def process_avro_message(message):
    try:
        avro_data = message.data
        bytes_reader = BytesIO(avro_data)
        decoder = BinaryDecoder(bytes_reader)
        reader = DatumReader()
        rows = []
        try:
            while True:
                try:
                    record = reader.read(decoder)
                    processed_record = {}
                    for key, value in record.items():
                        if isinstance(value, (dict, list)):
                            processed_record[key] = str(value)
                        else:
                            processed_record[key] = value
                    rows.append(processed_record)
                
                except EOFError:
                    break
            df = pd.DataFrame(rows)
            csv_filename = f'pubsub_data_{pd.Timestamp.now().strftime("%Y%m%d_%H%M%S")}.csv'
            df.to_csv(csv_filename, index=False)
            
            print(f"Saved {len(df)} records to {csv_filename}")
            message.ack()
            return df
        except Exception as decode_error:
            print(f"Error decoding Avro message: {decode_error}")
            message.nack()
            return None
    
    except Exception as e:
        print(f"Error processing message: {e}")
        message.nack()
        return None
    
                                
streaming_pull_future = subscriber.subscribe(subscription_path, callback=process_avro_message)
with subscriber:
    try:
        streaming_pull_future.result()
    except TimeoutError:
        streaming_pull_future.cancel()
        streaming_pull_future.result()
