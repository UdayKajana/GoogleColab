import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from fastavro import reader
import io
import csv
import typing
import uuid
import logging
logging.getLogger().setLevel(logging.INFO)
project_id = "vz-it-np-gudv-dev-vzntdo-0"
subscription_id = "wireline_churn_test_topic-sub"
subscription_path = f"projects/{project_id}/subscriptions/{subscription_id}"
gcs_bucket = "vznet-test"
gcs_output_path = "wireline_churn_test/tgt/customer_profile"

schema = [
    "ont_activation_date",
    "data_circuit_id",
    "circuit_id",
    "video_circuit_id",
    "service_type",
    "address_id",
    "vision_account_id",
    "vision_customer_id",
    "address_type",
    "line_of_business"
]

def parse_avro_message(message):
    try:
        avro_bytes = message.data
        avro_file = io.BytesIO(avro_bytes)
        avro_reader = reader(avro_file)
        records = []
        for record in avro_reader:
            records.append(record)
        logging.log("Total Size of files: "+(len(records)))
        yield records  
    except Exception as e:
        print(f"Error parsing Avro message: {e}")

def format_to_csv(records: typing.List[dict]) -> str:
    logging.log("records#="+records)
    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=schema)
    writer.writeheader()
    for record in records:
        logging.log("record#="+records)
        writer.writerow(record)

    return output.getvalue()

def create_unique_filename(records: typing.List[dict]) -> typing.Tuple[str, str]:
    csv_data = format_to_csv(records)
    filename = f"customer_profile_{uuid.uuid4()}.csv"

    return filename, csv_data

def run_pipeline():
    with beam.Pipeline(options=pipeline_options) as pipeline:
        messages = (
            pipeline
            | "ReadFromPubSub" >> beam.io.ReadFromPubSub(subscription=subscription_path)
        )
        parsed_data = (
            messages
            | "ParseAvroMessages" >> beam.FlatMap(parse_avro_message)
        )
        csv_data = (
            parsed_data
            | "FormatToCSV" >> beam.Map(create_unique_filename)
        )

def Print_element(element):
    logging.info("element="+str(element))
    return element
pipeline_options = PipelineOptions(
    streaming=True,
    project=project_id,
    temp_location=f"gs://{gcs_bucket}/wireline_churn_test/tmp",
    region="us-central1"
)

if __name__ == '__main__':
    run_pipeline()
