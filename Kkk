import apache_beam as beam
from apache_beam.options.pipeline_options import PipelineOptions
from apache_beam.options.pipeline_options import SetupOptions
from apache_beam.io.gcp.pubsub import ReadFromPubSub

class CustomOptions(PipelineOptions):
    """
    Custom options to accept user-defined inputs.
    """
    @classmethod
    def _add_argparse_args(cls, parser):
        parser.add_argument(
            '--input_subscription',
            required=True,
            help='Pub/Sub subscription to read from in the format "projects/<project_id>/subscriptions/<subscription_name>"'
        )

def run():
    # Parse pipeline options, including custom options
    pipeline_options = PipelineOptions()
    custom_options = pipeline_options.view_as(CustomOptions)
    pipeline_options.view_as(SetupOptions).save_main_session = True

    # Retrieve the runtime value of the subscription
    input_subscription = custom_options.input_subscription

    if not input_subscription:
        raise ValueError("The input_subscription parameter must be provided.")

    # Create the Dataflow pipeline
    with beam.Pipeline(options=pipeline_options) as pipeline:
        messages = (
            pipeline
            | 'Read from Pub/Sub' >> ReadFromPubSub(subscription=input_subscription)
            | 'Decode Message' >> beam.Map(lambda msg: msg.decode('utf-8'))  # Decode bytes to string
            | 'Print Messages' >> beam.Map(print)  # Print messages to the console
        )

if __name__ == '__main__':
    run()
python your_script_name.py \
    --runner DataflowRunner \
    --project <project_id> \
    --region <region> \
    --staging_location gs://<your-bucket>/staging/ \
    --temp_location gs://<your-bucket>/temp/ \
    --template_location gs://<your-bucket>/templates/pubsub_template
