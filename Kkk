from google.cloud import pubsub_v1
from google.cloud import storage
import avro.schema
from avro.io import DatumReader, BinaryDecoder
from io import BytesIO
import csv
import pandas as pd
import io

def process_avro_message(message):
    """
    Process Avro message from PubSub and convert to CSV
    
    Args:
    message (pubsub_v1.subscriber.message.Message): PubSub message containing Avro data
    
    Returns:
    pandas.DataFrame: Converted data
    """
    try:
        # Get the message data
        avro_data = message.data
        
        # Create a BytesIO object from the input string
        bytes_reader = BytesIO(avro_data)
        
        # Create a decoder
        decoder = BinaryDecoder(bytes_reader)
        
        # Create a DatumReader
        reader = DatumReader()
        
        # List to store all rows
        rows = []
        
        try:
            while True:
                try:
                    # Decode the next record
                    record = reader.read(decoder)
                    
                    # Flatten nested records if necessary
                    processed_record = {}
                    for key, value in record.items():
                        # Convert complex types to string
                        if isinstance(value, (dict, list)):
                            processed_record[key] = str(value)
                        else:
                            processed_record[key] = value
                    
                    rows.append(processed_record)
                
                except EOFError:
                    # End of data
                    break
            
            # Convert to DataFrame
            df = pd.DataFrame(rows)
            
            # Save to local CSV
            csv_filename = f'pubsub_data_{pd.Timestamp.now().strftime("%Y%m%d_%H%M%S")}.csv'
            df.to_csv(csv_filename, index=False)
            
            print(f"Saved {len(df)} records to {csv_filename}")
            
            # Acknowledge the message
            message.ack()
            
            return df
        
        except Exception as decode_error:
            print(f"Error decoding Avro message: {decode_error}")
            message.nack()
            return None
    
    except Exception as e:
        print(f"Error processing message: {e}")
        message.nack()
        return None

# Example of how to use in a Jupyter Notebook
def main():
    # Configure PubSub Subscriber
    subscriber = pubsub_v1.SubscriberClient()
    subscription_path = subscriber.subscription_path(
        'your-project-id', 
        'your-subscription-name'
    )
    
    # Streaming pull
    streaming_pull_future = subscriber.subscribe(
        subscription_path, 
        callback=process_avro_message
    )
    
    print(f"Listening for messages on {subscription_path}")
    
    # Keep the main thread running
    try:
        streaming_pull_future.result(timeout=30)  # Adjust timeout as needed
    except TimeoutError:
        streaming_pull_future.cancel()
        print("Streaming pull timeout")

# Uncomment and run when ready to process messages
# main()
