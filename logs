import logging
import sys
import argparse
from apache_beam import Create, Map, Pipeline, Row
from apache_beam.transforms.sql import SqlTransform
from apache_beam.transforms.external import JavaJarExpansionService
from apache_beam.options.pipeline_options import PipelineOptions

logging.basicConfig(stream=sys.stdout, level=logging.INFO)

parser = argparse.ArgumentParser()
parser.add_argument('--project', dest='project', required=True, help='Project ID')
parser.add_argument('--runner', dest='runner', required=False, default="DataflowRunner", help='Pipeline runner')
parser.add_argument('--region', dest='region', required=False, default="us-east4", help='GCP project region')
parser.add_argument('--staging_location', dest='staging_location', required=True, help='Staging GCS bucket path')
parser.add_argument('--temp_location', dest='temp_location', required=True, help='Temp GCS bucket path')

known_args, beam_args = parser.parse_known_args()

options = {
    'project': known_args.project,
    'runner': known_args.runner,
    'region': known_args.region,
    'staging_location': known_args.staging_location,
    'temp_location': known_args.temp_location,
    'save_main_session': True,
    'streaming': False
}

pipeline_options = PipelineOptions.from_dictionary(options)

def create_row(x):
    return Row(
        recipe=str(x[0]),
        fruit=str(x[1]), 
        quantity=int(x[2]),
        unit_cost=float(x[3]),
        is_berry=bool(x[1].endswith('berry'))
    )

def run_pipeline():
    with Pipeline(options=pipeline_options) as p:
        # Move expansion service creation inside the pipeline
        expansion_service = JavaJarExpansionService("/app/beam-sdks-java-extensions-sql-expansion-service-2.61.0.jar")
        
        data = [
            ["pie", "strawberry", 3, 1.5],
            ["muffin", "blueberry", 2, 2.0]
        ]

        pc = (p 
              | Create(data)
              | Map(create_row))

        result = (pc 
                 | SqlTransform("SELECT * FROM PCOLLECTION WHERE quantity > 1", 
                              expansion_service=expansion_service)
                 | "printing" >> Map(print))

if __name__ == '__main__':
    run_pipeline()
